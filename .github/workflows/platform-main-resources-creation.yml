name: Terraform Apply (latest)

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: "Environment (dev/stage/prod)"
        required: true
        default: "stage"
      BRANCH:
        description: "Git ref (branch/tag) to checkout"
        required: true
        default: "feature/btl-3"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_REGION: ${{ vars.AWS_REGION }}

  # Using static keys as in your current setup
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  TF_BUCKET: ${{ inputs.ENV }}-btl-platform-main-repo-backend-tfstate-${{ secrets.AWS_ACCOUNT_ID }}
  TF_LOCK_TABLE: platform-main-state-lock

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Compute remote-state vars
        run: |
          echo "TF_VAR_tf_state_bucket=${{ inputs.ENV }}-btl-platform-main-repo-backend-tfstate-${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_tf_state_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_network_state_key=${{ inputs.ENV }}/platform-main/network/terraform.tfstate" >> $GITHUB_ENV

      # ---------- NETWORK ----------
      - name: Terraform Apply Network
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/network

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/network/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- COMPUTE ----------
      - name: Terraform Apply Compute
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/compute

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/compute/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

        # ---------- NLB ----------
      - name: Terraform Apply NLB
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/nlb

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/nlb/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

        # ---------- REST API (after NLB) ----------
      - name: Terraform Apply REST API
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/rest-api

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/rest-api/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
            
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

        # ---------- ECR ----------

      - name: Terraform Apply ECR
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/ecr

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/ecr/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

        # ---------- SSM ----------
      - name: Terraform Apply SSM
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/ssm

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/ssm/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"
                   
          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

        # ---------- CLOUDWATCH ----------
      - name: Terraform Apply CloudWatch
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/cloudwatch

          terraform init -reconfigure \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/platform-main/cloudwatch/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"
