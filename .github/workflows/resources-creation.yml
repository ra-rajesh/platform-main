name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      ENV:
        description: "Environment (dev/stage/prod)"
        required: true
        default: "stage"
      BRANCH:
        description: "Git ref (branch/tag) to checkout"
        required: true
        default: "main"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_REGION: ${{ vars.AWS_REGION }}

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  TF_BUCKET: ${{ inputs.ENV }}-btl-idlms-repo-backend-api-tfstate-${{ secrets.AWS_ACCOUNT_ID }}
  TF_LOCK_TABLE: resources-terraform-locks
  ARTIFACTS_BUCKET: ${{ inputs.ENV }}-idlms-artifacts-${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # ---------- S3 ----------
      - name: Terraform Apply S3
        if: github.event_name == 'workflow_dispatch'
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/s3

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/s3/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          if aws s3api head-bucket --bucket "${TF_BUCKET}" >/dev/null 2>&1; then
            terraform import -no-color -input=false \
              -var-file="${{ github.event.inputs.ENV }}.tfvars" \
              aws_s3_bucket.state "${TF_BUCKET}" || true
          fi

          if aws s3api head-bucket --bucket "${ARTIFACTS_BUCKET}" >/dev/null 2>&1; then
            terraform import -no-color -input=false \
              -var-file="${{ github.event.inputs.ENV }}.tfvars" \
              aws_s3_bucket.artifacts "${ARTIFACTS_BUCKET}" || true
          fi

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- ECR ----------
      - name: Terraform Apply ECR
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/ecr

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/ecr/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- NETWORK ----------
      - name: Terraform Apply Network
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/network

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/network/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- CLOUDWATCH (app logs: SSM param + Docker log group) ----------
      - name: Terraform Apply CloudWatch (app logs)
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/cloudwatch-app

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/cloudwatch-app/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- COMPUTE ----------
      - name: Terraform Apply Compute
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/compute

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/compute/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- NLB ----------
      - name: Terraform Apply NLB
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/nlb

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/nlb/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- SSM (generic params you already had) ----------
      - name: Terraform Apply SSM
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/ssm

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/ssm/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- SSM APP ENVS (NEW) ----------
      - name: Terraform Apply SSM App Envs
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/ssm-app-envs

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/ssm-app-envs/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"

      # ---------- REST-API ----------
      - name: Terraform Apply REST-API
        if: success()
        run: |
          set -euo pipefail
          cd infra/environments/${{ github.event.inputs.ENV }}/stacks/rest-api

          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="key=${{ github.event.inputs.ENV }}/rest-api/terraform.tfstate" \
            -backend-config="region=${TF_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

          terraform apply -auto-approve -var-file="${{ github.event.inputs.ENV }}.tfvars"
